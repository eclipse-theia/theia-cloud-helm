{{- $logoFileExtension :=  tpl (.Values.app.logoFileExtension | toString) . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: landing-page-config
  namespace: {{ .Release.Namespace }}
data:
  config.js: |
    window.theiaCloudConfig = {
      appId: "{{ tpl (.Values.app.id | toString) . }}",
      appName: "{{ tpl (.Values.app.name | toString) . }}",
      useEphemeralStorage: {{ tpl (.Values.landingPage.ephemeralStorage | toString) . }},
      useKeycloak: {{ tpl (.Values.keycloak.enable | toString) . }},
      keycloakAuthUrl: "{{ tpl (.Values.keycloak.authUrl | toString) . }}",
      keycloakRealm: "{{ tpl (.Values.keycloak.realm | toString) . }}",
      keycloakClientId: "{{ tpl (.Values.keycloak.clientId | toString) . }}",
      {{- if .Values.hosts.usePaths }}
      serviceUrl: "{{ tpl (.Values.hosts.serviceProtocol | toString) . }}://{{ tpl (.Values.hosts.paths.baseHost | toString) . }}/{{ tpl (.Values.hosts.paths.service | toString) . }}",
      {{- else }}
      serviceUrl: "{{ tpl (.Values.hosts.serviceProtocol | toString) . }}://{{ tpl (.Values.hosts.service | toString) . }}{{ if .Values.hosts.useServicePortInHostname }}:{{ tpl (.Values.hosts.servicePort | toString) . }}{{ end }}",
      {{- end }}
      appDefinition: "{{ tpl (.Values.landingPage.appDefinition | toString) . }}",
      additionalApps: [
        {{- range $key, $val := .Values.landingPage.additionalApps }}
        {
          appId: {{ $key | quote}},
          appName: {{ $val.label | quote }},
        },
        {{- end }}
      ],
      logoFileExtension: "{{ $logoFileExtension }}",
      disableInfo: {{ tpl (.Values.landingPage.disableInfo | toString) . }},
      {{- if .Values.landingPage.infoText }}
      infoText: "{{ tpl (.Values.landingPage.infoText | toString) . }}",
      {{- end }}
      {{- if .Values.landingPage.infoTitle }}
      infoTitle: "{{ tpl (.Values.landingPage.infoTitle | toString) . }}",
      {{- end }}
      {{- if .Values.landingPage.loadingText }}
      loadingText: "{{ tpl (.Values.landingPage.loadingText | toString) . }}",
      {{- end }}
    };
binaryData:
  {{- if .Values.app.logoData }}
  {{ printf "logo.%s: " $logoFileExtension }}{{ .Values.app.logoData }}
  {{- else }}
  {{- range $path, $bytes := .Files.Glob (printf "%s" .Values.app.logo)}}
  {{ printf "logo.%s: " $logoFileExtension }}{{ $.Files.Get $path | b64enc }}
  {{ end }}
  {{- end }}
